intall.packages("lpSolve")
install.packages("lpSolve")
install.packages("lpSolveAPI")
library(lpSolve)
library(lpSolveAPI)
# Make an empty tableau object
lp_model <- make.lp(nrow = 0, ncol = 2) #ncol = number of decision vars
# enter objective function
set.objfn(lprec = lp_model, obj = c(6,10))
lp_model
# tell R this is a maximization problem
lp.control(lprec = lp_model, sense = "max")
lp_model
# Input constraint functions one at a time
# Manyfacturing
add.constraint(lprec = lp_model,
xt = c(6,5), )
add.constraint(lprec = lp_model,
+                xt = c(6,5), )
add.constraint(lprec = lp_model,
xt = c(6,5), # coeffs of the LHS
type = "<=", # Inequality sign
rhs = 70) # RHS
add.constraint(lprec = lp_model,
xt = c(2,5),
type = "<=",
rhs = 90)
add.constraint(lprec = lp_model,
xt = c(1,0),
type = "<=",
rhs = 7)
lp_model
solve(lp_model)
# ^ If you see '0', that's a good sign
add.constraint(lprec = lp_model,
xt = c(2,10),
type = "<=",
rhs = 90)
lp_model
remove(constraint = R2)
delete(lprec = lp_model, constraints = R2)
delete.constraint(lprec = lp_model,
2)
lp_model
# Return optimal values of decision variables
get.variables(lp_model)
# Return optimal value of objective function
get.objective(lp_model)
# get sensitivity
get.sensitivity.obj(lp_model)
# Shadow Price
get.sensitivity.rhs(lp_model)
# Shadow price for manufacturing: $80
# Shadow price for painting: $60
# Shadow price for "A" constraint: $0 --> means there is slack
rnorm(n = 10, mean = 100, sd = 20)
rnorm(n = 10, mean = 100, sd = 20)
x <- rnorm(n = 1000000, mean = 100, sd = 20)
x <- rnorm(n = 100000, mean = 100, sd = 20)
hist(x)
plot(density(x))
x <- rbinom(n = 100000, size = 10, prob = 0.20)
plot(density(x))
hist(x)
rnorm(n = 10, mean = 100, sd = 20)
set.seed(5); rnorm(n = 10, mean = 100, sd = 20)
rnorm(n = 10, mean = 100, sd = 20)
rnorm(n = 10, mean = 100, sd = 20)
rnorm(n = 10, mean = 100, sd = 20)
set.seed(5); rnorm(n = 10, mean = 100, sd = 20)
sales <- set.seed(1); rnorm(n = 1000000, mean = 2000, sd = 750)
sales <- rnorm(n = 1000000, mean = 2000, sd = 750)
head(sales)
set.seed(1); sales <- rnorm(n = 1000000, mean = 2000, sd = 750)
head(sales)
sales <- round(sales, 0)
sales
sales <- round(sales, digits = 0)
sales
head(sales)
hist(sales)
min(sales)
max(sales)
sales <- pmax(sales, 0)
max(sales)
min(sales)
# Impose a celing of 4000 units
sales <- pmin(sales, 4000)
max(sales)
his(sales)
profit <- (1.99 * sales) - (0.70 * sales) - 1750
hist(sales)
profit <- (1.99 * sales) - (0.70 * sales) - 1750
df <- data.frame(sales, profit)
view(df)
View(df)
hist(profit)
min(profit)
max(profit)
mean(profit)
# What is the probability of breaking even? (profit > 0)
profit > 0
# What is the probability of breaking even? (profit > 0)
mean(profit > 0)
# Empirical distribution
sample(x = c("Heads", "Tails"), # values that R is allowed to return
size = 1000, # number of simulations to return
prob = c(0.5, 0.5), # probability each value has of occurring
replace = TRUE) # T/F - Can R sampel with replacement?
# Empirical distribution
set.seed(4); x <- sample(x = c("Heads", "Tails"), # values that R is allowed to return
size = 1000, # number of simulations to return
prob = c(0.5, 0.5), # probability each value has of occurring
replace = TRUE) # T/F - Can R sampel with replacement?
prop.table(table(x))
# Empirical distribution
set.seed(4); x <- sample(x = c("Heads", "Tails"), # values that R is allowed to return
size = 1000000, # number of simulations to return
prob = c(0.5, 0.5), # probability each value has of occurring
replace = TRUE) # T/F - Can R sampel with replacement?
prop.table(table(x))
set.seed(4); x <- sample(x = c("Gryffindor", "Hufflepuff", "Ravenclaw", "Slytherin"), # values that R is allowed to return
size = 1000000, # number of simulations to return
prob = c(0.15, 0.20, 0.43, 0.22), # probability each value has of occurring
replace = TRUE) # T/F - Can R sampel with replacement?
prop.table(table(x))
# Expected profit at Gloucester
sp_g <- 3.25
demand_g <- 3500
fixed_costs <- 10000
profit_g <- (sp_g * demand_g) - fixed_costs
profit_g
# Rockport
# Selling price
set.seed(1); sp_r <- rnorm(n = 1000000, mean = 3.65, sd = 0.20)
sp_r
# Cleaning: round values
sp_r <- round(sp_r, digits = 2)
sp_r
min(sp_r)
max)sp_r
max(sp_r)
set.seed(324); demand_r <- sample(x = c(0, 1000, 3000, 4000, 5000, 6000),
size = 1000000,
prob = c(0.02, 0.03, 0.05, 0.08, 0.33, 0.29, 0.30),
replace = TRUE) # sample bc empirical dist
table(demand_r)
set.seed(324); demand_r <- sample(x = c(0, 1000, 2000, 3000, 4000, 5000, 6000),
size = 1000000,
prob = c(0.02, 0.03, 0.05, 0.08, 0.33, 0.29, 0.30),
replace = TRUE) # sample bc empirical dist
table(demand_r)
prop.table(table(demand_r))
demand_r <- pmin(demand_r, 3500)
prop.table(table(demand_r))
# Create simulated profit values
profit_r <- (demand_r * sp_r) - 10000
df <- data.frame(sp_r, demand_r, 10000, profit_r)
View(df)
hist(profit_r)
# What is the expected profit at Rockport
mean(profit_r) # 1,911
# Probability of making a profit at Rockport
mean(profit_r > 0)
# What is the probability that Rockport will be more profitable than Gloucester?
mean(profit_r > 1375)
set.seed(4); demand <- rnorm(n = 1000000, mean = 100, sd = 20)
demand
# Cleaning demand values
demand <- round(demand, digits = 0)
min(demand)
max(demand)
df <- data.frame(demand)
View(df)
# Shortage or surplus?
state <- ifelse(demand <- supply, "surplus", "shortage")
df <- data.frame(supply, demand, state)
View(df)
supply <- 100
set.seed(4); demand <- rnorm(n = 1000000, mean = 100, sd = 20)
# Cleaning/checking demand values
demand <- round(demand, digits = 0)
demand
# Shortage or surplus?
state <- ifelse(demand <- supply, "surplus", "shortage")
min(demand)
max(demand)
df <- data.frame(supply, demand, state)
View(df)
supply <- 100
set.seed(4); demand <- rnorm(n = 1000000, mean = 100, sd = 20)
# Cleaning/checking demand values
demand <- round(demand, digits = 0)
min(demand)
max(demand)
demand
# Shortage or surplus?
state <- ifelse(demand <- supply, "surplus", "shortage")
# Shortage or surplus?
state <- ifelse(demand <= supply, "surplus", "shortage")
supply <- 100
set.seed(4); demand <- rnorm(n = 1000000, mean = 100, sd = 20)
# Cleaning/checking demand values
demand <- round(demand, digits = 0)
min(demand)
max(demand)
# Shortage or surplus?
state <- ifelse(demand <= supply, "surplus", "shortage")
df <- data.frame(supply, demand, state)
View(df)
# Determine actual sales (supply or demand, depending on state)
sales <- ifelse(state == 'surplus', demand, supply)
df <- data.frame(supply, demand, state, sales)
View(df)
# Calculate revenue
revenue <- (50 * sales)
df <- data.frame(supply, demand, state, sales, revenue)
View(df)
# Calculate margin quantity
margin <- ifelse(state == 'surplus',
(supply - demand),
(demand - supply))
df <- data.frame(supply, demand, state, sales, revenue, margin)
View(df)
cost_coeff <- ifelse(state = 'surplus', 15, 30)
df <- data.frame(supply, demand, state, sales, revenue, margin, cost_coeff)
View(df)
df <- data.frame(supply, demand, state, sales, revenue, margin, cost_coeff, cost)
cost <- (cost_coeff * margin)
df <- data.frame(supply, demand, state, sales, revenue, margin, cost_coeff, cost)
cost_coeff <- ifelse(state = 'surplus', 15, 30)
cost <- (cost_coeff * margin)
df <- data.frame(supply, demand, state, sales, revenue, margin, cost_coeff, cost)
View(df)
cost_coeff <- ifelse(state == 'surplus', 15, 30)
cost_coeff <- ifelse(state == 'surplus', 15, 30)
cost <- (cost_coeff * margin)
df <- data.frame(supply, demand, state, sales, revenue, margin, cost_coeff, cost)
View(df)
profit <- (revenue - cost)
df <- data.frame(supply, demand, state, sales, revenue, margin, cost_coeff, cost, profit)
View(df)
# Explore simulated values
hist(profit)
mean(profit)
mean(profit > 0)
# Service level (what % of orders were we able to fulfill?)
sum(df$sales)
sum(df$demand)
# Service level (what % of orders were we able to fulfill?)
sum(df$sales) / sum(df$demand)
supply <- 120
set.seed(4); demand <- rnorm(n = 1000000, mean = 100, sd = 20)
# Cleaning/checking demand values
demand <- round(demand, digits = 0)
min(demand)
max(demand)
# Shortage or surplus?
state <- ifelse(demand <= supply, "surplus", "shortage")
# Determine actual sales (supply or demand, depending on state)
sales <- ifelse(state == 'surplus', demand, supply)
# Calculate revenue
revenue <- (50 * sales)
# Calculate margin quantity
margin <- ifelse(state == 'surplus',
(supply - demand),
(demand - supply))
cost_coeff <- ifelse(state == 'surplus', 15, 30)
cost <- (cost_coeff * margin)
# Net profit
profit <- (revenue - cost)
# Explore simulated distribution
hist(profit)
mean(profit)
mean(profit > 0)
# Service level (what % of orders were we able to fulfill?)
sum(df$sales) / sum(df$demand) # Service level of about 92% of customers
supply <- 110
set.seed(4); demand <- rnorm(n = 1000000, mean = 100, sd = 20)
# Cleaning/checking demand values
demand <- round(demand, digits = 0)
min(demand)
max(demand)
# Shortage or surplus?
state <- ifelse(demand <= supply, "surplus", "shortage")
# Determine actual sales (supply or demand, depending on state)
sales <- ifelse(state == 'surplus', demand, supply)
# Calculate revenue
revenue <- (50 * sales)
# Calculate margin quantity
margin <- ifelse(state == 'surplus',
(supply - demand),
(demand - supply))
cost_coeff <- ifelse(state == 'surplus', 15, 30)
cost <- (cost_coeff * margin)
# Net profit
profit <- (revenue - cost)
# Explore simulated distribution
hist(profit)
mean(profit)
View(df)
df <- data.frame(supply, demand, state, sales, revenue, margin, cost_coeff, cost, profit)
# Service level (what % of orders were we able to fulfill?)
sum(df$sales) / sum(df$demand) # Service level of about 92% of customers
supply <- 130
set.seed(4); demand <- rnorm(n = 1000000, mean = 100, sd = 20)
# Cleaning/checking demand values
demand <- round(demand, digits = 0)
min(demand)
max(demand)
# Shortage or surplus?
state <- ifelse(demand <= supply, "surplus", "shortage")
# Determine actual sales (supply or demand, depending on state)
sales <- ifelse(state == 'surplus', demand, supply)
# Calculate revenue
revenue <- (50 * sales)
# Calculate margin quantity
margin <- ifelse(state == 'surplus',
(supply - demand),
(demand - supply))
cost_coeff <- ifelse(state == 'surplus', 15, 30)
cost <- (cost_coeff * margin)
# Net profit
profit <- (revenue - cost)
# Explore simulated distribution
hist(profit)
mean(profit)
mean(profit > 0)
df <- data.frame(supply, demand, state, sales, revenue, margin, cost_coeff, cost, profit)
# Service level (what % of orders were we able to fulfill?)
sum(df$sales) / sum(df$demand) # Service level of about 92% of customers
sample <- rnorm(n = 1000, mean = 350, sd = 40)
sample
set.seed(49); buyers <- rbinom(n = 10000, size = 35, prob = 0.25)
buyers
profit <- (500 * buyers) - 3000
profit
min(profit)
max(profit)
mean(profit)
mean(profit > 0)
mean(profit >= 3500)
set.seed(30); demand <- rnorm(n = 1000000, mean = 90000, sd = 40000)
demand <- round(demand, digits = 0)
demand <- pmin(demand, 0)
demand <- pmax(demand, 90000)
demand
set.seed(30); demand <- rnorm(n = 1000000, mean = 90000, sd = 40000)
demand <- round(demand, digits = 0)
demand <- pmax(demand, 0)
demand <- pmin(demand, 90000)
demand <- pmax(demand, 0)
demand
salvage <- 90000 - demand
salvage
profit <- ifelse(salvage > 0, 12 * demand + 8.5(salvage)
- 7.5*90000 - 175000, 12*90000 - 7.5*90000
- 175000)
profit <- ifelse(salvage > 0, 12*demand + 8.5*salvage - 7.5*90000 - 175000, 12*90000 - 7.5*90000 - 175000)
profit
count(profit)
length(profit)
profit
mean(profit)
mean(profit > 0)
